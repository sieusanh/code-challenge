name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Code Quality & Linting
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

  # Build & Type Check
  build:
    name: Build & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Build TypeScript
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 1

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run security check
        run: |
          npx audit-ci --moderate
        continue-on-error: true

  # Docker Build
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: express-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Database Migration Test
  migration:
    name: Database Migration Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Prisma migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db?schema=public
        run: npx prisma migrate deploy

      - name: Generate Prisma Client
        run: npm run prisma:generate

  # Deployment (example for production)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, build, security, docker, migration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy notification
        run: |
          echo "Deployment would happen here"
          echo "Configure your deployment platform (Heroku, AWS, DigitalOcean, etc.)"

      # Example: Deploy to Heroku
      # - name: Deploy to Heroku
      #   uses: akhileshns/heroku-deploy@v3.12.12
      #   with:
      #     heroku_api_key: ${{secrets.HEROKU_API_KEY}}
      #     heroku_app_name: "your-app-name"
      #     heroku_email: "your-email@example.com"

      # Example: Deploy to DigitalOcean
      # - name: Deploy to DigitalOcean
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.DO_HOST }}
      #     username: ${{ secrets.DO_USERNAME }}
      #     key: ${{ secrets.DO_SSH_KEY }}
      #     script: |
      #       cd /var/www/express-api
      #       git pull
      #       npm ci
      #       npm run build
      #       npm run prisma:migrate
      #       pm2 restart express-api
